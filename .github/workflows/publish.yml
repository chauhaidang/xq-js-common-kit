name: Build and Publish

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    # expose whether package.json version changed so publish job can conditionally run
    outputs:
      version_changed: ${{ steps.version_check.outputs.version_changed }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      - name: Install dependencies
        run: npm ci
      - name: Check if package.json version changed
        id: version_check
        shell: bash
        run: |
          # Ensure we have enough history to compare
          git fetch --no-tags --prune || true

          # Current version from workspace
          VERSION_NOW=$(node -e "console.log(require('./package.json').version)")

          # Try to get package.json from previous commit
          PREV_COMMIT=$(git rev-parse HEAD^1 2>/dev/null || true)
          VERSION_PREV=""
          if [ -n "$PREV_COMMIT" ]; then
            PKG_PREV=$(git show $PREV_COMMIT:package.json 2>/dev/null || true)
            if [ -n "$PKG_PREV" ]; then
              VERSION_PREV=$(printf "%s" "$PKG_PREV" | node -e "let s='';process.stdin.on('data',c=>s+=c);process.stdin.on('end',()=>{try{console.log(JSON.parse(s).version)}catch(e){console.log('')}})")
            fi
          fi

          echo "version_now=$VERSION_NOW" >> "$GITHUB_OUTPUT"
          echo "version_prev=$VERSION_PREV" >> "$GITHUB_OUTPUT"
          if [ "$VERSION_NOW" != "$VERSION_PREV" ]; then
            echo "version_changed=true" >> "$GITHUB_OUTPUT"
          else
            echo "version_changed=false" >> "$GITHUB_OUTPUT"
          fi
      - name: Run tests
        run: npm test
      - name: Build
        run: npm run build

  publish:
    needs: build
    runs-on: ubuntu-latest
    # Only publish when package.json version has changed in the build
    if: needs.build.outputs.version_changed == 'true'
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js for publish
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          registry-url: 'https://npm.pkg.github.com'
          cache: 'npm'
      - name: Install dependencies
        run: npm ci
      - name: Authenticate to GitHub Packages
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "//npm.pkg.github.com/:_authToken=${NODE_AUTH_TOKEN}" > ~/.npmrc
      - name: Publish to GitHub Packages
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          npm publish
